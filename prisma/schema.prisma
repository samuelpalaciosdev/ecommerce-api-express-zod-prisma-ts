// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  client
  admin
  superAdmin
}

model User {
  id       String   @id @default(cuid())
  name     String
  lastName String
  email    String   @unique
  password String
  isActive Boolean  @default(true)
  role     Role     @default(client)
  orders   Order[] // User orders
  reviews  Review[] // User reviews
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Int
  image       String
  color       String?
  inStock     Boolean  @default(true)
  brand       Brand    @relation(fields: [brandId], references: [id])
  brandId     String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Review      Review[]
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  description String
  logo        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Order {
  id         String      @id @default(cuid())
  total      Int
  state      String
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[] // Order items in the order
}

model Review {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  name      String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
}
